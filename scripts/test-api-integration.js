#!/usr/bin/env node

/**
 * Script de prueba para verificar la integraci√≥n con la API REST
 * Este script simula el procesamiento de un archivo Excel y env√≠a datos a la API
 */

const { ExcelProcessor } = require('../dist/services/ExcelProcessor');
const { ApiService } = require('../dist/services/ApiService');

// Mock de datos de prueba
const mockExcelData = [
  {
    licitacion_id: '5178-4406-COT25',
    nombre: '400145/B5/SP 1010890/IZ (SERVICIO DE COFFE)',
    fecha_publicacion: '2025-08-22 21:00',
    fecha_cierre: '2025-08-25 20:00',
    organismo: 'UNIVERSIDAD DE CHILE',
    unidad: 'UCHILE Facultad Medicina (5178)',
    monto_disponible: 650000,
    moneda: 'CLP',
    estado: 'Publicada'
  },
  {
    licitacion_id: 'LIC-002-2024',
    nombre: 'Servicios de mantenimiento de software',
    fecha_publicacion: '2024-01-20 10:00',
    fecha_cierre: '2024-02-20 18:00',
    organismo: 'Ministerio de Tecnolog√≠a',
    unidad: 'Direcci√≥n de Sistemas',
    monto_disponible: 25000000,
    moneda: 'CLP',
    estado: 'Abierta'
  }
];

async function testApiIntegration() {
  console.log('üß™ Iniciando prueba de integraci√≥n con API REST...\n');

  try {
    // 1. Probar conectividad con la API
    console.log('1Ô∏è‚É£ Verificando conectividad con la API...');
    const apiService = new ApiService();
    const isHealthy = await apiService.checkApiHealth();
    
    if (isHealthy) {
      console.log('‚úÖ API REST disponible');
    } else {
      console.log('‚ö†Ô∏è  API REST no disponible - ejecutando en modo simulaci√≥n');
    }

    // 2. Probar env√≠o de datos individuales
    console.log('\n2Ô∏è‚É£ Probando env√≠o de datos individuales...');
    for (const data of mockExcelData) {
      try {
        if (isHealthy) {
          const response = await apiService.sendLicitacion(data);
          console.log(`‚úÖ Licitaci√≥n ${data.licitacion_id} enviada:`, response.success);
        } else {
          console.log(`üîç [SIMULACI√ìN] Licitaci√≥n ${data.licitacion_id} ser√≠a enviada`);
        }
      } catch (error) {
        console.log(`‚ùå Error enviando licitaci√≥n ${data.licitacion_id}:`, error.message);
      }
    }

    // 3. Probar env√≠o de lote
    console.log('\n3Ô∏è‚É£ Probando env√≠o de lote...');
    try {
      if (isHealthy) {
        const response = await apiService.sendLicitacionesBatch(mockExcelData, 1);
        console.log('‚úÖ Lote enviado:', response.success);
        console.log(`   üìä √âxitos: ${response.data.successCount}, Errores: ${response.data.errorCount}`);
      } else {
        console.log('üîç [SIMULACI√ìN] Lote ser√≠a enviado');
      }
    } catch (error) {
      console.log('‚ùå Error enviando lote:', error.message);
    }

    // 4. Probar verificaci√≥n de existencia
    console.log('\n4Ô∏è‚É£ Probando verificaci√≥n de existencia...');
    try {
      if (isHealthy) {
        const exists = await apiService.checkLicitacionExists('5178-4406-COT25');
        console.log('‚úÖ Verificaci√≥n de existencia:', exists);
      } else {
        console.log('üîç [SIMULACI√ìN] Verificaci√≥n de existencia ser√≠a ejecutada');
      }
    } catch (error) {
      console.log('‚ùå Error verificando existencia:', error.message);
    }

    // 5. Probar obtenci√≥n de estad√≠sticas
    console.log('\n5Ô∏è‚É£ Probando obtenci√≥n de estad√≠sticas...');
    try {
      if (isHealthy) {
        const stats = await apiService.getApiStats();
        console.log('‚úÖ Estad√≠sticas obtenidas:', stats);
      } else {
        console.log('üîç [SIMULACI√ìN] Estad√≠sticas ser√≠an obtenidas');
      }
    } catch (error) {
      console.log('‚ùå Error obteniendo estad√≠sticas:', error.message);
    }

    console.log('\nüéâ Prueba de integraci√≥n completada');
    console.log('\nüìã Resumen:');
    console.log(`   üåê API disponible: ${isHealthy ? 'S√≠' : 'No'}`);
    console.log(`   üìä Datos de prueba: ${mockExcelData.length} registros`);
    console.log(`   üîß Modo: ${isHealthy ? 'Real' : 'Simulaci√≥n'}`);

  } catch (error) {
    console.error('‚ùå Error en la prueba de integraci√≥n:', error);
    process.exit(1);
  }
}

// Ejecutar prueba si el script se ejecuta directamente
if (require.main === module) {
  testApiIntegration();
}

module.exports = { testApiIntegration };
