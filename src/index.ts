import 'reflect-metadata';
import { initializeDatabase } from './config/database';
import { ExcelProcessor } from './services/ExcelProcessor';
import {
  config,
  validateConfig,
  createRequiredDirectories,
} from './config/config';
import logger from './utils/logger';

async function main() {
  try {
    console.log('üöÄ Iniciando aplicaci√≥n de procesamiento de Excel...');

    // Validar y mostrar configuraci√≥n
    validateConfig();

    // Crear directorios necesarios
    createRequiredDirectories();

    logger.info('üöÄ Iniciando aplicaci√≥n de procesamiento de Excel...');

    // Inicializar base de datos
    await initializeDatabase();

    // Crear procesador de Excel
    const processor = new ExcelProcessor();

    // Ejecutar procesamiento
    await processor.run();

    logger.info('‚úÖ Aplicaci√≥n finalizada exitosamente');
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Error en la aplicaci√≥n:', error);
    process.exit(1);
  }
}

// Manejar se√±ales de terminaci√≥n
process.on('SIGINT', () => {
  logger.info('üõë Recibida se√±al SIGINT, cerrando aplicaci√≥n...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  logger.info('üõë Recibida se√±al SIGTERM, cerrando aplicaci√≥n...');
  process.exit(0);
});

// Manejar errores no capturados
process.on('uncaughtException', (error) => {
  logger.error('‚ùå Error no capturado:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Promesa rechazada no manejada:', reason);
  process.exit(1);
});

// Ejecutar aplicaci√≥n
main();
