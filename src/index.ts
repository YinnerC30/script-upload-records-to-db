import 'reflect-metadata';
import { initializeDatabase, closeDatabaseConnection } from './config/database';
import { ExcelProcessor } from './services/ExcelProcessor';
import {
  config,
  validateConfig,
  createRequiredDirectories,
} from './config/config';
import logger from './utils/logger';

// Funci√≥n para mostrar ayuda
function showHelp() {
  console.log(`
üöÄ Excel Processor - Procesador de Archivos Excel

Uso: excel-processor [OPCIONES]

Opciones:
  -h, --help          Mostrar esta ayuda
  -v, --version       Mostrar versi√≥n
  -c, --config        Mostrar configuraci√≥n actual
  -d, --dry-run       Ejecutar sin procesar archivos (solo validar)

Ejemplos:
  excel-processor                    # Procesamiento normal
  excel-processor --help             # Mostrar ayuda
  excel-processor --config           # Ver configuraci√≥n
  excel-processor --dry-run          # Solo validar archivos

Configuraci√≥n:
  El programa usa variables de entorno o archivo .env
  Ver README.md para m√°s detalles sobre configuraci√≥n
`);
}

// Funci√≥n para mostrar versi√≥n
function showVersion() {
  const packageJson = require('../package.json');
  console.log(`Excel Processor v${packageJson.version}`);
}

// Funci√≥n para mostrar configuraci√≥n
function showConfig() {
  console.log('üìã Configuraci√≥n actual:');
  console.log(
    `  üóÑÔ∏è  Base de datos: ${config.database.host}:${config.database.port}/${config.database.database}`
  );
  console.log(`  üìÅ Directorio Excel: ${config.directories.excel}`);
  console.log(`  üìÅ Directorio procesados: ${config.directories.processed}`);
  console.log(`  üìÅ Directorio errores: ${config.directories.error}`);
  console.log(`  üì¶ Tama√±o de lote: ${config.processing.batchSize}`);
}

// Variable global para modo dry-run
let isDryRun = false;

// Funci√≥n para procesar argumentos
async function parseArguments() {
  const args = process.argv.slice(2);

  for (const arg of args) {
    switch (arg) {
      case '-h':
      case '--help':
        showHelp();
        process.exit(0);
        break;

      case '-v':
      case '--version':
        showVersion();
        process.exit(0);
        break;

      case '-c':
      case '--config':
        showConfig();
        process.exit(0);
        break;

      case '-d':
      case '--dry-run':
        console.log('üîç Modo dry-run activado (solo validaci√≥n)');
        isDryRun = true;
        break;

      default:
        console.error(`‚ùå Opci√≥n desconocida: ${arg}`);
        console.log('Usa --help para ver las opciones disponibles');
        process.exit(1);
    }
  }
}

async function main() {
  try {
    // Procesar argumentos primero
    await parseArguments();

    console.log('üöÄ Iniciando aplicaci√≥n de procesamiento de Excel...');

    // Validar y mostrar configuraci√≥n
    validateConfig();

    // Crear directorios necesarios
    createRequiredDirectories();

    logger.info('üöÄ Iniciando aplicaci√≥n de procesamiento de Excel...');

    // Inicializar base de datos
    await initializeDatabase();

    // Crear procesador de Excel
    const processor = new ExcelProcessor(isDryRun);

    // Ejecutar procesamiento
    await processor.run();

    logger.info('‚úÖ Aplicaci√≥n finalizada exitosamente');
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Error en la aplicaci√≥n:', error);
    process.exit(1);
  }
}

// Manejar se√±ales de terminaci√≥n
process.on('SIGINT', async () => {
  logger.info('üõë Recibida se√±al SIGINT, cerrando aplicaci√≥n...');
  await closeDatabaseConnection();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  logger.info('üõë Recibida se√±al SIGTERM, cerrando aplicaci√≥n...');
  await closeDatabaseConnection();
  process.exit(0);
});

// Manejar errores no capturados
process.on('uncaughtException', (error) => {
  logger.error('‚ùå Error no capturado:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Promesa rechazada no manejada:', reason);
  process.exit(1);
});

// Ejecutar aplicaci√≥n
main();
