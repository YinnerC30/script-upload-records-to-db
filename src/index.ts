import {
  config,
  createRequiredDirectories,
  validateConfig,
} from './config/config';
import { ExcelProcessor } from './services/ExcelProcessor';
import { ArgumentParser, ParsedArgs } from './cli/argumentParser';
import { CommandHandler } from './cli/commandHandler';
import { EnvironmentManager } from './cli/environmentManager';
import logger from './utils/logger';

// Variable global para modo dry-run
let isDryRun = false;

// Funci√≥n para procesar argumentos
export async function parseArguments(): Promise<{
  isDryRun: boolean;
  envUpdates: Record<string, string>;
  shouldRun: boolean;
}> {
  const parser = new ArgumentParser();
  const args = parser.parseArguments();

  const commandHandler = new CommandHandler();
  const envManager = new EnvironmentManager();

  // Manejar comandos que no requieren procesamiento
  if (args.help) {
    commandHandler.showHelp();
    process.exit(0);
  }

  if (args.version) {
    commandHandler.showVersion();
    process.exit(0);
  }

  if (args.config) {
    commandHandler.showConfig();
    process.exit(0);
  }

  // Configurar modo dry-run
  if (args.dryRun) {
    console.log('üîç Modo dry-run activado (solo validaci√≥n)');
    isDryRun = true;
  }

  // Actualizar archivo .env si hay cambios
  if (Object.keys(args.envUpdates).length > 0) {
    try {
      await envManager.updateEnvFile(args.envUpdates);
      console.log('‚úÖ Configuraci√≥n actualizada exitosamente');
      console.log('üîÑ Reinicia la aplicaci√≥n para aplicar los cambios\n');
    } catch (error) {
      console.error('‚ùå Error actualizando configuraci√≥n:', error);
      process.exit(1);
    }
  }

  return {
    isDryRun,
    envUpdates: args.envUpdates,
    shouldRun: args.run || args.dryRun,
  };
}

// Funci√≥n principal
export async function main() {
  try {
    console.log('üöÄ Iniciando Excel Processor...\n');

    // Procesar argumentos de l√≠nea de comandos
    const {
      isDryRun: dryRunMode,
      envUpdates,
      shouldRun,
    } = await parseArguments();

    // Si hubo cambios de configuraci√≥n y no se indic√≥ ejecutar, salir
    if (Object.keys(envUpdates).length > 0 && !shouldRun) {
      console.log(
        '‚öôÔ∏è  Configuraci√≥n aplicada. Usa "run" para ejecutar o "run --dry-run" para validar.'
      );
      return;
    }

    // Si no se indic√≥ ejecutar, salir con mensaje informativo
    if (!shouldRun) {
      console.log(
        '‚ÑπÔ∏è  Nada que ejecutar. Usa "run" para ejecutar o " run --dry-run" para validar.'
      );
      return;
    }

    // Validar configuraci√≥n
    validateConfig();

    // Crear directorios necesarios
    createRequiredDirectories();

    // Crear archivo .env de ejemplo si no existe
    const envManager = new EnvironmentManager();
    await envManager.createExampleEnvFile();

    // Inicializar logger
    logger.info('üöÄ Excel Processor iniciado', {
      dryRun: dryRunMode,
      config: {
        apiUrl: config.api.baseURL,
        excelDir: config.directories.excel,
      },
    });

    // Crear procesador de Excel
    const processor = new ExcelProcessor(dryRunMode);

    // Ejecutar procesamiento
    const result = await processor.run();

    if (!result.hadFile) {
      console.log('\n‚ÑπÔ∏è  No se encontraron archivos para procesar');
      logger.info('‚ÑπÔ∏è  No se encontraron archivos para procesar');
    } else if (result.failedCount === 0 && result.total > 0) {
      console.log('\n‚úÖ Procesamiento completado exitosamente');
      logger.info('‚úÖ Procesamiento completado exitosamente');
    } else if (result.total === 0) {
      console.log('\n‚ÑπÔ∏è  No hubo registros v√°lidos para procesar');
      logger.warn('‚ÑπÔ∏è  No hubo registros v√°lidos para procesar');
    } else {
      console.log(
        `\n‚ö†Ô∏è  Procesamiento completado con errores (${result.failedCount} fallidos de ${result.total})`
      );
      logger.warn('‚ö†Ô∏è  Procesamiento completado con errores', {
        failed: result.failedCount,
        total: result.total,
      });
    }
  } catch (error) {
    console.error('\n‚ùå Error durante el procesamiento:', error);
    logger.error('‚ùå Error durante el procesamiento', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    });

    process.exit(1);
  }
}

// Ejecutar funci√≥n principal
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });
}
